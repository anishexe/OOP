
Lab Assignment No 7:
Using standard template library (STL) list container implement following member functions of list class: empty, insert, reverse, sort, Unique, using iterator.
Aim:
To understand concept of standard template library (STL).
Description:
We can implement program Using standard template library (STL) list container implement following member functions of list class: empty, insert, reverse, sort, Unique, using iterator.
Oop Concepts Used:
1.Standard Template Library (STL):-
Lists are sequence containers that allow non-contiguous memory allocation. As compared to vector, list has slow traversal, but once a position has been found, insertion and deletion are quick. Normally, when we say a List, we talk about doubly linked list. For implementing a singly linked list, we use forward list.
2.list:-
•	List is a popularly used sequence container. Container is an object that holds data of same type. List container is implemented as doubly linked-list, hence it provides bidirectional sequential access to it's data.
•	List doesn't provide fast random access, it only supports sequential access in both directions. List allows insertion and deletion operation anywhere within a sequence in constant time.
•	Elements of list can be scattered in different chunks of memory. Container stores necessary information to allow sequential access to it's data. Lists can shrink or expand as needed from both ends at run time. The storage requirement is fulfilled automatically by internal allocator.
•	Zero sized lists are also valid. In that case list.begin() and list.end() points to same location. But behavior of calling front() or back() is undefined.
Syntax:-
List<type>object_name;
Program:
#include<iostream>
#include<list>
using namespace std;
void display(list<int>&l)
{
list<int>::iterator itr;
for(itr=l.begin();itr!=l.end();++itr)
{
cout<<*itr<<",";
cout<<"\n\n";
}
}
int main()
{
	list <int>l1;
	list<int>l2(5);
	int no,value;
	std::cout<<"Enter the no of elements in list 1::";
	std::cin>>no;
		for(int i=0;i<no;i++)
		{
			std::cout<<"Enterthe value::";
			std::cin>>value;
			l1.push_back(value);
		}
		display(l1);
		list<int>::iterator itr2;
	for(itr2=l2.begin();itr2!=l2.end();++itr2)
	{
		*itr2=rand()/100;
	}
std::cout<<"List 1 element are::";
display(l1);
cout<<"list 2 element are::";
display(l2);
list<int>listA,listB;
listA=l1;
listB=l2;
l1.merge(l2);
cout<<"merge unsorted list::";
display(l1);
listA.sort();
listB.sort();
listA.merge(l2);
cout<<"merge sorted list::";
display(listA);
cout<<"reverse list::";
listA.reverse();
display(listA);
return 0;
}
output:





  

Conclusion:
Thus we have successfully done list by concept of list and we also used in build function to perform operation on list concept in oops.

